<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【写作思路三】</title>
      <link href="2023/10/18/20231018-xie-zuo-si-lu-san/"/>
      <url>2023/10/18/20231018-xie-zuo-si-lu-san/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-LaTex-处理-PDF-文件-whale"><a href="#whale-LaTex-处理-PDF-文件-whale" class="headerlink" title=":whale: LaTex 处理 PDF 文件 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> LaTex 处理 PDF 文件 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、LaTex-合并-PDF-文件"><a href="#1、LaTex-合并-PDF-文件" class="headerlink" title="1、LaTex 合并 PDF 文件"></a>1、LaTex 合并 PDF 文件</h2><p>编译环境为 TeXstudio 2.12.10，OS 为 Win 10，使用以下代码。</p><pre><code>\documentclass[a4paper]{article}\usepackage{pdfpages}\begin{document} \includepdfmerge{m1.pdf,1-2} % 第一至第二页\includepdfmerge{m2.pdf,1} % 第一页\end{document}</code></pre><p>注意，.tex 文件和 .pdf 文件需要在同一文件夹内（同一路径下）。</p><h2 id="2、LaTex-取-PDF-文件某一-几页"><a href="#2、LaTex-取-PDF-文件某一-几页" class="headerlink" title="2、LaTex 取 PDF 文件某一/几页"></a>2、LaTex 取 PDF 文件某一/几页</h2><p>使用同样代码即可。</p><img src="/images_mc/26.jpg" width="35%" height="35%">]]></content>
      
      
      
        <tags>
            
            <tag> 写作思路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【技术探索八】</title>
      <link href="2023/09/23/20230912-ji-zhu-tan-suo-ba/"/>
      <url>2023/09/23/20230912-ji-zhu-tan-suo-ba/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-深度学习库安装-—-huggingface-whale"><a href="#whale-深度学习库安装-—-huggingface-whale" class="headerlink" title=":whale: 深度学习库安装 — huggingface :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 深度学习库安装 — huggingface <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、安装-huggingface-hub"><a href="#1、安装-huggingface-hub" class="headerlink" title="1、安装 huggingface_hub"></a>1、安装 huggingface_hub</h2><p>在 Anaconda 官网中 HuggingFace 目录对应下的 <a href="https://anaconda.org/search?q=hugging">huggingface_hub</a> ，选择近期下载安装较多的版本，huggingface_hub-0.16.4-py_0.tar.bz2，并保存至本地 Anaconda/pkgs 目录下。</p><h2 id="2、安装-transformers"><a href="#2、安装-transformers" class="headerlink" title="2、安装 transformers"></a>2、安装 transformers</h2><p>在 Anaconda 官网中 HuggingFace 目录对应下的 <a href="ttps://anaconda.org/search?q=transformer">transformers</a> ，选择近期下载安装较多的版本，transformers-4.28.1-py_0.tar.bz2，并保存至本地 Anaconda/pkgs 目录下。</p><h2 id="3、Hugging-Face-基本使用方法一"><a href="#3、Hugging-Face-基本使用方法一" class="headerlink" title="3、Hugging Face 基本使用方法一"></a>3、Hugging Face 基本使用方法一</h2><p>如果有 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f681.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，直接参考 <a href="https://blog.csdn.net/liu_chengwei/article/details/126487671">Hugging Face 的 Transformers 库快速入门</a> 代码即可运行。<br>运行期间若本地没有相应的 pre-trained model，会首先下载 server 中的 model 至本地，具体执行图如下所示，也可参考 <a href="https://zhuanlan.zhihu.com/p/619610550">Hugging Face使用入门辅助理解</a> 。</p><p><img src="https://pic1.zhimg.com/80/v2-93db33000afe270432445e1514dec528_720w.webp" alt="代码运行时下载的 model 等文件"></p><h2 id="4、443-Error"><a href="#4、443-Error" class="headerlink" title="4、443 Error"></a>4、443 Error</h2><p>如果出现 HTTPSConnectionPool (443) 的情况，说明无法连接 <a href="http://huggingface.co/">huggingface.co 官网</a> 。<br>此时需要先把 huggingface.co 官网对应的 pre-trained model 下载至本地。<br>可尝试以下三种方法下载（以 model <code>distilbert-base-uncased-finetuned-sst-2-english</code> 为例）。</p><ul><li>git 命令 <code>git clone https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english</code> ，可能同样出现无法访问的情况。</li><li>人工下载该 model 对应的 <a href="https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english/tree/main">main 文件夹</a> 中的所有文件，并存放至本地。三个 pre-trained model 择一即可。需要使用 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f681.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。</li><li>通过 <a href="https://aliendao.cn/">huggingface 镜像</a> 下载。</li></ul><h2 id="5、Hugging-Face-基本使用方法二"><a href="#5、Hugging-Face-基本使用方法二" class="headerlink" title="5、Hugging Face 基本使用方法二"></a>5、Hugging Face 基本使用方法二</h2><p>调用本地已下载的 pre-trained model 进行 <strong>情感分析、文本生成</strong> 等任务，具体调用及使用方法如下。</p><ul><li>参考 <a href="https://zhuanlan.zhihu.com/p/627688602">hugggingface.co 无法访问问题</a> 下载和存放 model、tokenizer 等文件。</li><li>参考 <a href="https://blog.csdn.net/weixin_41496173/article/details/130939267">终极解决 Hugging Face 模型推理</a> 修正相应的代码。</li><li>参考官网的 <a href="https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english/tree/main">model usecase/Use in Transformer</a> 修改相应的代码。</li></ul><h2 id="6、示例"><a href="#6、示例" class="headerlink" title="6、示例"></a>6、示例</h2><p>Python 代码示例如下，其中 <strong>path</strong> 为本地存储 huggingface pre-trained model 的位置。</p><pre><code>from transformers import pipelinefrom transformers import AutoTokenizer, AutoModelForSequenceClassificationpath = 'E:/pycharm/huggingface/model/distilbert-base-uncased-finetuned-sst-2-english'tokenizer = AutoTokenizer.from_pretrained(path)model = AutoModelForSequenceClassification.from_pretrained(path)classifier = pipeline("sentiment-analysis", model=model, tokenizer=tokenizer)# print(tokenizer)# print(model)result1 = classifier("I've been waiting for a HuggingFace course my whole life.")print(result1)results2 = classifier(["I've been waiting for a HuggingFace course my whole life.", "I hate this so much!"])print(results2)</code></pre><p>如果安装和配置均成功，则会显示以下 result。</p><pre><code>[{'label': 'POSITIVE', 'score': 0.9598049521446228}][{'label': 'POSITIVE', 'score': 0.9598049521446228}, {'label': 'NEGATIVE', 'score': 0.9994558691978455}]</code></pre><p>以上所有的 Python、PyTorch 环境或版本设定等可参考 <a href="https://daojuhecheng.github.io/2023/09/09/20230909-ji-zhu-tan-suo-qi/">深度学习库安装 — torch/tf/keras</a> 。</p><img src="/images_mc/25.jpg" width="35%" height="35%">]]></content>
      
      
      
        <tags>
            
            <tag> 技术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【技术探索七】</title>
      <link href="2023/09/09/20230909-ji-zhu-tan-suo-qi/"/>
      <url>2023/09/09/20230909-ji-zhu-tan-suo-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-深度学习库安装-—-torch-tf-keras-whale"><a href="#whale-深度学习库安装-—-torch-tf-keras-whale" class="headerlink" title=":whale: 深度学习库安装 — torch/tf/keras :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 深度学习库安装 — torch/tf/keras <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、本地配置"><a href="#1、本地配置" class="headerlink" title="1、本地配置"></a>1、本地配置</h2><p>Win 11（无 N 卡，16G+256G/1T），Anaconda 23.7.2（Anaconda 环境下 python 为 3.11.4），PyCharm 2023.2，VSCode 1.81.1。</p><h2 id="2、安装目标"><a href="#2、安装目标" class="headerlink" title="2、安装目标"></a>2、安装目标</h2><p>在本地实现 torch、tensorflow、keras 等基本 DL 库的安装。</p><h2 id="3、安装-Anaconda"><a href="#3、安装-Anaconda" class="headerlink" title="3、安装 Anaconda"></a>3、安装 Anaconda</h2><p>首先安装 Anaconda 23.7.2，安装过程中唯一需要注意的是 <strong>path</strong> 的设定。需要在系统环境变量中添加以下三个目录：</p><pre><code>Anaconda 安装路径Anaconda 安装路径\ScriptsAnaconda 安装路径\Library\bin</code></pre><p>检测是否安装成功，win+R 打开 cmd，输入 conda -V，如果出现 Anaconda 版本号，说明安装和环境设置无误。<br>参考：<a href="https://zhuanlan.zhihu.com/p/464219687?utm_id=0">Anaconda 安装（过程详细）</a> 。</p><h2 id="4、安装-PyCharm-VSCode"><a href="#4、安装-PyCharm-VSCode" class="headerlink" title="4、安装 PyCharm/VSCode"></a>4、安装 PyCharm/VSCode</h2><p>分别在 pycharm/vscode 官网下载较新的安装包，选定安装路径后默认安装即可。<br>其中 pycharm 需要在移植 code 时选择 <strong>interpreter</strong>。<br>如果需要选择 Anaconda 配置的虚拟环境（python）可参考：<a href="https://blog.csdn.net/qq_45122293/article/details/129314276">PyCharm 使用 conda 虚拟环境</a> 。</p><h2 id="5、安装虚拟环境"><a href="#5、安装虚拟环境" class="headerlink" title="5、安装虚拟环境"></a>5、安装虚拟环境</h2><p>由于 keras 3.0（ <a href="https://baijiahao.baidu.com/s?id=1771215458134716777&amp;wfr=spider&amp;for=pc">Keras 3.0预览版/机器之心</a> ）尚未正式发布，目前仍然选择旧版本的 keras 2.3.1，其对应的 tf 版本为 2.2.0，对应的 python 版本为 3.7。<br>因此需要使用 Anaconda 安装虚拟环境，即安装 python 3.7.16。<br>其中涉及的 Anaconda 替换源和创建虚拟环境可参考：<a href="https://blog.csdn.net/qq_49141095/article/details/130276262">Anaconda 创建虚拟环境</a> 、<a href="https://blog.csdn.net/weixin_41673825/article/details/123901866">Anaconda 安装与换国内源教程</a> 。<br>另外，tesorflow 和 keras 的对应版本可参考：<a href="https://zhuanlan.zhihu.com/p/486277263?utm_id=0">Tensorflow 和 Keras 版本对应关系</a> 。</p><h2 id="6、安装-tensorflow-keras"><a href="#6、安装-tensorflow-keras" class="headerlink" title="6、安装 tensorflow/keras"></a>6、安装 tensorflow/keras</h2><p>使用 <strong>管理员权限</strong> 打开 Anaconda Powershell Prompt，使用命令 conda activate python37 激活已安装的 python 3.7.16 的虚拟环境，在这个虚拟环境中分别安装 tensorflow 和 keras。<br>最终二者的版本分别为，tensorflow 2.2.0，keras 2.3.1。<br>以上两个 DL 库的安装可参考：<a href="https://blog.csdn.net/weixin_43763292/article/details/131277246">TensorFlow 详细配置</a> 、<a href="https://blog.csdn.net/Alexa_/article/details/123801758">Keras 环境的安装</a> 。</p><h2 id="7、安装-torch"><a href="#7、安装-torch" class="headerlink" title="7、安装 torch"></a>7、安装 torch</h2><p>同上一步打开虚拟环境 python37，并安装 torch，主要包括以下三步：</p><ul><li>首先，参考 <a href="https://blog.csdn.net/ShenWeiKKX/article/details/103534376">pytorch-cpu 或 gpu 离线或在线高速下载安装</a> 一文，在 <a href="https://pytorch.org/">torch 官网</a> 选定对应的 OS、package、language、compute platform 下需要的 <strong>command</strong>，在 Anaconda 的终端输入该命令执行安装操作。</li><li>其次，如果属于教育网，一般可以直接完成安装。如果是普通网络，需要借助不同的 <strong>源</strong>（如清华源等）进行下载安装。</li><li>第三，通常 torch 包自身会出现下载超时的问题，此时可参考 <a href="https://blog.csdn.net/qq_43556824/article/details/131169115">在线＋离线安装 pytorch 经历</a> 一文解决，即从 <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/win-64/">清华源</a> 下载 Anaconda 安装失败的 torch 包（约 135MB）并执行 <strong>离线安装</strong>（以下路径为本地安装包路径）:<pre><code>conda install E:\anaconda\pkgs\pytorch-1.13.1-py3.7_cpu_0.tar.bz2</code></pre>至此，torch 库安装结束，最终安装成功的 torch 版本为 1.13.1。</li></ul><h2 id="8、测试"><a href="#8、测试" class="headerlink" title="8、测试"></a>8、测试</h2><p>测试 tensorflow、keras、torch 是否安装成功，只需在修改了 python interpreter 的 pycharm 中编写如下代码：</p><pre><code>import kerasimport tensorflowimport torchprint(keras.__version__)print(tensorflow.__version__)print(torch.__version__)</code></pre><p>本地 PC 会显示：</p><pre><code>2.3.12.2.01.13.1</code></pre><p>说明三个 DL 库均安装成功。</p><p><img src="https://img-blog.csdnimg.cn/e412c1e721fa4535a5d8b16f730bcb48.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【技术探索六】</title>
      <link href="2022/09/28/20220928-ji-zhu-tan-suo-liu/"/>
      <url>2022/09/28/20220928-ji-zhu-tan-suo-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-SourceTree-push-失败-whale"><a href="#whale-SourceTree-push-失败-whale" class="headerlink" title=":whale: SourceTree push 失败 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> SourceTree push 失败 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、原因分析"><a href="#1、原因分析" class="headerlink" title="1、原因分析"></a>1、原因分析</h2><p>自 2021 年 8 月 13 日起，github 不再支持使用密码 push 的方式，导致 SourceTree push 失败。</p><p>Error 显示为：</p><pre><code>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</code></pre><h2 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h2><ul><li><p>CSDN 提供的方案 (步骤) 一：<a href="https://blog.csdn.net/qq_34548075/article/details/119768954">设置 token</a> 。</p></li><li><p>CSDN 提供的方案 (步骤) 二：<a href="https://blog.csdn.net/xingzhewanfu/article/details/84303537">更新 sourcetree</a> 。</p></li><li><p>方案 (步骤) 三：<a href="https://www.crazyming.com/note/2540/">使用新版本的 sourcetree 创建仓库</a> 。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/aec0240409934495bdc82f8b8143f205.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【写作思路二】</title>
      <link href="2022/08/31/20220831-xie-zuo-si-lu-er/"/>
      <url>2022/08/31/20220831-xie-zuo-si-lu-er/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-Paper-写作-tricks-一-whale"><a href="#whale-Paper-写作-tricks-一-whale" class="headerlink" title=":whale: Paper 写作 tricks 一 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Paper 写作 tricks 一 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、How-to-write-threats-to-validity"><a href="#1、How-to-write-threats-to-validity" class="headerlink" title="1、How to write threats to validity?"></a>1、How to write threats to validity?</h2><p>Threats to construct validity are concerned with the relationship between theory and observation (理论和现象的适配性质).</p><p>Threats to <strong>internal validity</strong> are concerned with factors that may affect a dependent variable and were not considered in the study (<strong>可能影响变量的某些未考虑因素</strong>).</p><p>Threats to conclusion validity are concerned with the relationship between the treatment and the outcome (论述与结果的关联性).</p><p>Threats to <strong>external validity</strong> are concerned with the generalizability of our results (<strong>结果的普适性</strong>).</p><p>参考自 <a href="https://www.cnblogs.com/XBWer/p/8762210.html">Validity</a> 。</p><h2 id="2、Some-sentences-to-describe-experimental-results"><a href="#2、Some-sentences-to-describe-experimental-results" class="headerlink" title="2、Some sentences to describe experimental results."></a>2、Some sentences to describe experimental results.</h2><p>The performance of the models can be evaluated by their ability to yield well-calibrated predictions and a good ranking.</p><p>The calibration of the model can be assessed by plotting the mean observed value vs the mean predicted value on groups of test samples binned by predicted risk.</p><p>The least squares loss (along with the implicit use of the identity link function) of the Ridge regression model seems to cause this model to be badly calibrated. In particular, it tends to underestimate the risk and can even predict invalid negative frequencies.</p><p>Using the Poisson loss with a log-link can correct these problems and lead to a well-calibrated linear model.</p><p>The Gini index reflects the ability of a model to rank predictions irrespective of their absolute values, and therefore only assess their ranking power.</p><p>Despite the improvement in calibration, the ranking power of both linear models are comparable and well below the ranking power of the Gradient Boosting Regression Trees.</p><p>The Poisson deviance computed as an evaluation metric reflects both the calibration and the ranking power of the model. It also makes a linear assumption on the ideal relationship between the expected value and the variance of the response variable. For the sake of conciseness we did not check whether this assumption holds.</p><p>Traditional regression metrics such as Mean Squared Error and Mean Absolute Error are hard to meaningfully interpret on count values with many zeros.</p><p>参考自 <a href="https://scikit-learn.org/stable/auto_examples/linear_model/plot_poisson_regression_non_normal_loss.html#sphx-glr-auto-examples-linear-model-plot-poisson-regression-non-normal-loss-py">Poisson regression</a> 。</p><p><img src="https://img-blog.csdnimg.cn/3e26622b04be4bd1aa0c446eda2af5dc.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 写作思路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【写作思路一】</title>
      <link href="2022/01/21/20220121-xie-zuo-si-lu-yi/"/>
      <url>2022/01/21/20220121-xie-zuo-si-lu-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-Latex-写作-tricks-一-whale"><a href="#whale-Latex-写作-tricks-一-whale" class="headerlink" title=":whale: Latex 写作 tricks 一 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Latex 写作 tricks 一 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、常用的图标-—-pifont"><a href="#1、常用的图标-—-pifont" class="headerlink" title="1、常用的图标 — pifont"></a>1、常用的图标 — pifont</h2><p>宏包 pifont 内有一些较常用的 latex 图标，如对错号 (✓)、带圆圈的数字 (① ② ③) 等。这里的 markdown 符号参考 <a href="https://blog.csdn.net/appleyuchi/article/details/84036985">markdown 常用表达式一</a> (复制 html 源码到 markdown 中) 和 <a href="https://blog.csdn.net/konglongdanfo1/article/details/85204312">markdown 常用表达式二</a> 。</p><p>当引入宏包 <code>\usepackage{pifont}</code> 后，在 latex 代码中输入 <code>\ding{172}</code> 即表示 ①，输入 <code>\ding{173}</code> 则表示 ②。参考 <a href="https://blog.csdn.net/weixin_45502929/article/details/105572624">LaTeX pifont 宏包符号列表</a> 。</p><p><img src="https://img-blog.csdnimg.cn/82210cc73a014cedb1d376f89ca7c67b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5qC55Y-35Zub562J5LqO5LqM,size_9,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="LaTeX pifont 宏包符号列表"></p><h2 id="2、自定义命令-—-newcommand"><a href="#2、自定义命令-—-newcommand" class="headerlink" title="2、自定义命令 — \newcommand"></a>2、自定义命令 — \newcommand</h2><p>Latex 中的自定义命令 <code>\newcommand</code> 可以是简单的字符串替换，也可以使用参数和指定参数的默认值。参考 <a href="https://blog.csdn.net/sinat_38816924/article/details/84349748">如何在 latex 中自定义命令</a> 。</p><p>示例，<code>\newcommand{\bai}[1]{\textcolor{blue}{#1}}</code> 即表示命令 <code>\bai</code> 需要设置 <strong>一个参数</strong>，其对应的 latex 代码为 <code>\bai{}</code>。这里的大括号内填入 <code>\textcolor{blue}{#1}</code> 中 <code>#1</code> 需要补充的内容，即 <strong>文本内容</strong>，同时由于设定了颜色，因此显示为 <strong>蓝色字体</strong>。</p><p><img src="https://img-blog.csdnimg.cn/c6406b89acdd44edb04781b4046245d8.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 写作思路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模型解释五】</title>
      <link href="2021/12/21/20211221-mo-xing-jie-shi-wu/"/>
      <url>2021/12/21/20211221-mo-xing-jie-shi-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-模型可解释性-attention-一-whale"><a href="#whale-模型可解释性-attention-一-whale" class="headerlink" title=":whale: 模型可解释性 attention 一 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 模型可解释性 attention 一 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、预训练模型的可解释性"><a href="#1、预训练模型的可解释性" class="headerlink" title="1、预训练模型的可解释性"></a>1、预训练模型的可解释性</h2><p>预训练模型包括 pre-train 和 fine-tune 两个阶段，模型在这两个阶段究竟学到了什么？以 BERT 为例，主流的分析方法有两种 (参考 <a href="https://blog.csdn.net/c9Yv2cf9I06K2A9E/article/details/104470992/">深度学习预训练模型可解释性概览</a>)。</p><p>一是 <strong>probing tasks</strong>，即设定一些简单的 NLP 任务，将 BERT 的每一层的输出都作为 embedding (neural features of sample)，并将其传至后接的简单的分类器，从而验证使用不同层时的模型的性能。<br>二是 <strong>visualization</strong>，在 BERT 的多层 Transformer 中存在 multi-head self-attention，其中各个 word 之间通过交互会得到一个 attention score。通过可视化该 score，即可得知不同层或不同 head 中被关注的 word。</p><h2 id="2、BERT-中的-probing-tasks"><a href="#2、BERT-中的-probing-tasks" class="headerlink" title="2、BERT 中的 probing tasks"></a>2、BERT 中的 probing tasks</h2><p>在 <a href="https://arxiv.org/pdf/1906.01698.pdf">Open Sesame: Getting Inside BERT’s Linguistic Knowledge</a> (2019 ACL Workshop BlackboxNLP) 一文中，作者把 BERT 的每一层的 embedding 都接上一个简单的分类器做训练 (用于完成不同的分类任务)，每一个 token 会对应一个结果 (如下图所示)，其 label 则为一个 one hot 化的向量，损失函数可以简单设定为交叉熵。</p><p><img src="https://img-blog.csdnimg.cn/f50dd07fe35949009e21f36746dc10eb.png#pic_center" alt="ACL 1 token"></p><p>我们主要关注其中关于 layer 的 ablation study，如下图所示。</p><p><img src="https://img-blog.csdnimg.cn/1e36c79156e84ecbb2d5db7c55beae00.png" alt="ablation study of attention layer"></p><p>当 layer 递增由 1 变化为 4 时，acc 急剧增加并接近最大值，layer 继续增加，acc 则有所下降。<br>作者认为浅层的 info 更具象化 (localized)，其所包含的 context 不足以 ensure acc。随着 self-attention layer 的增加，info 会逐渐抽象化 (abstract)，以 4~6 layers 为限，acc 最高。随后继续增加 layer，info 则过于抽象，反而会使得 acc 有所下降。</p><h2 id="3、BERT-中的-visualization"><a href="#3、BERT-中的-visualization" class="headerlink" title="3、BERT 中的 visualization"></a>3、BERT 中的 visualization</h2><p>在 <a href="https://arxiv.org/pdf/1906.04341.pdf">What does BERT look at? An Analysis of BERT’s Attention</a> (2019 ACL Workshop BlackboxNLP) 中，作者通过可视化 BERT 的 attention 层来了解各个 attention 层的关注点。</p><p>如下图所示，有的 attention 是 broadly 形式 (关注所有的词)，有的 attention 关注其下一个 token，有的 attention 集中关注 [SEP] 符号，还有的 attention 会关注标点符号。</p><p><img src="https://img-blog.csdnimg.cn/1a6040ef882e4b74948635d765f2a80d.png" alt="ACL 2 attention"></p><p>其他更具体的 experimental settings 可参考 <a href="https://arxiv.org/pdf/1906.04341.pdf">原文</a>。</p><p><img src="https://img-blog.csdnimg.cn/3bc6d0b482ec453db5c3039a18ec3e9a.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 模型解释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模型解释四】</title>
      <link href="2021/12/20/20211220-mo-xing-jie-shi-si/"/>
      <url>2021/12/20/20211220-mo-xing-jie-shi-si/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-模型可解释性-XAI-二-whale"><a href="#whale-模型可解释性-XAI-二-whale" class="headerlink" title=":whale: 模型可解释性 XAI 二 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 模型可解释性 XAI 二 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、XAI-技术类别"><a href="#1、XAI-技术类别" class="headerlink" title="1、XAI 技术类别"></a>1、XAI 技术类别</h2><p>模型可解释性的研究可根据解释的局部性 (具体样本的局部解释、整个模型的全局解释)、解释性实现的阶段 (建模的前、中、后)、模型依赖性 (模型相关、模型无关) 等不同角度进行划分。</p><p>下图则是根据 <strong>可解释性实现的阶段</strong> 所作的划分 (参考 <a href="https://cloud.tencent.com/developer/article/1552427">模型可解释性技术概览</a>) 。</p><p><img src="https://img-blog.csdnimg.cn/284c0fefbafd4ec6b89967391e5eaa38.png" alt="XAI 分类"></p><h2 id="2、建模前的可解释性"><a href="#2、建模前的可解释性" class="headerlink" title="2、建模前的可解释性"></a>2、建模前的可解释性</h2><p>即通过基本的统计数据分析方法及可视化方法，得出关于待分析样本的初步结论，如阈值检测异常等。<br>虽然此类方法应用涉及范围广，但几乎不涉及更自动化的 AI 系统。</p><h2 id="3、可解释的模型"><a href="#3、可解释的模型" class="headerlink" title="3、可解释的模型"></a>3、可解释的模型</h2><p>(1) 可解释的 ML 算法，如线性回归、逻辑回归、决策树、KNN、朴素贝叶斯等。</p><p>(2) 优化后的神经网络。</p><ul><li>Interpretable CNN。Interpretable convolutional neural networks，CVPR 2018。</li><li>Attentive Multi-View Learning。Explainable Recommendation Through Attentive Multi-View Learning，AAAI 2019。</li></ul><p>(3) <strong>知识图谱及图算法在安全场景中的应用</strong>。</p><ul><li>Threat Intelligence Computing，安全日志、告警日志以及流量日志都存储为统一的时序图，进而通过攻击子图描述威胁或者攻击。Threat Intelligence Computing，CCS 2018。</li><li>NoDoze，利用溯源图 (Provenance Graph) 来定义和发现真实的攻击路径。NoDoze: Combatting Threat Alert Fatigue with Automated Provenance Triage，NDSS 2019。</li><li>Holmes，基于攻击链视角将时序上松散的可疑进程事件关联，能够有效提取APT攻击行为。HOLMES: real-time APT detection through correlation of suspicious information flows，S&amp;P 2019。</li></ul><h2 id="4、建模后的可解释性"><a href="#4、建模后的可解释性" class="headerlink" title="4、建模后的可解释性"></a>4、建模后的可解释性</h2><p>(1) 部分依赖图 Partial Dependence Plot。</p><ul><li>计算某个特征所有可能值情况下的模型预测均值，并可视化该特征的重要性，表征其与分类结果之间的关系。可参考 <a href="https://scikit-learn.org/0.15/index.html#">sklearn 库</a> 中函数 <code>plot_partial_dependence</code>，也可配合 sklearn 库中不同分类器的 <code>feature_importances_</code> 属性作图。</li></ul><p><img src="https://img-blog.csdnimg.cn/79f7563996dd4eceb5682e6267bf299f.png" alt="部分依赖图"></p><p>(2) 计算相应模型下不同特征的 feature importance。</p><ul><li>LIME，KDD 2016。<strong>待续</strong>。</li><li>LEMNA，CCS 2018。参考 <a href="https://daojuhecheng.github.io/2021/12/11/20211211-mo-xing-jie-shi-yi/">模型可解释性 Lemna</a> 。</li><li>SHAP，NIPS 2017。参考 <a href="https://daojuhecheng.github.io/2021/12/18/20211218-mo-xing-jie-shi-er/">模型可解释性 SHAP</a> 。</li><li>DeepLift，Learning important features through propagating activation differences，ICML 2017。</li><li>知识蒸馏 (model distilling)，即将复杂的教师模型学到的知识迁移到简化后的学生模型上，再对教师模型进行解释。参考 <a href="https://zhuanlan.zhihu.com/p/365067367">深度学习模型可解释性研究综述</a> 。</li></ul><p><img src="https://img-blog.csdnimg.cn/4d0d3689b6ec4a5aa56153423977bab5.png" alt="XAI"></p><h2 id="5、XAI-技术总结"><a href="#5、XAI-技术总结" class="headerlink" title="5、XAI 技术总结"></a>5、XAI 技术总结</h2><p>下表/图从解释阶段、解释域、模型相关性三个维度对上述可解释技术的特性进行了小结 (参考 <a href="https://cloud.tencent.com/developer/article/1552427">模型可解释性技术概览</a>) 。</p><p><img src="https://img-blog.csdnimg.cn/6efaa96016ed467f9f391bac932093de.png" alt="可解释技术小结"></p><p><img src="https://img-blog.csdnimg.cn/b32595aaf486457688aaf27822620198.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 模型解释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模型解释三】</title>
      <link href="2021/12/19/20211219-mo-xing-jie-shi-san/"/>
      <url>2021/12/19/20211219-mo-xing-jie-shi-san/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-模型可解释性-XAI-一-whale"><a href="#whale-模型可解释性-XAI-一-whale" class="headerlink" title=":whale: 模型可解释性 XAI 一 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 模型可解释性 XAI 一 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、XAI-基本概念"><a href="#1、XAI-基本概念" class="headerlink" title="1、XAI 基本概念"></a>1、XAI 基本概念</h2><p>XAI (eXplainable Artificial Intelligence) 是 Gartner 2019 给定的十大数据分析技术热点之一 (<a href="https://www.gartner.com/en/newsroom/press-releases/2019-02-18-gartner-identifies-top-10-data-and-analytics-technolo">Gartner Identifies Top 10 Data and Analytics Technology Trends for 2019</a>) 。<br>其可以被定义为能够 <strong>以人类可理解的方式解释其决策结果</strong> 的人工智能算法及系统，即通过提升算法/系统决策过程的透明度来增强人对算法/系统输出的信任。</p><p><img src="https://img-blog.csdnimg.cn/aedc7cc7764643b59794913d54435fae.png" alt="可解释性相关词词云"></p><h2 id="2、XAI-性能与可解释性"><a href="#2、XAI-性能与可解释性" class="headerlink" title="2、XAI 性能与可解释性"></a>2、XAI 性能与可解释性</h2><p>对于人类而言：</p><ul><li>针对低维度数据的线性分类模型容易被理解，复杂的模型则难以被理解。</li><li>直线、平面、三维可视化符合人类直觉、易于理解，非线性、超平面则难以解释。</li><li>以图像、声音为载体的数据易于理解，而其所转化的机器可读的高维数组、矩阵则很难为人所理解。</li></ul><p><img src="https://img-blog.csdnimg.cn/2933184a7a0b442480644467efe47941.png" alt="模型的预测性能与可解释性"></p><p>因此，XAI 技术的目标即：</p><ul><li>在提供模型可解释性的基础上，保持模型及系统的性能（识别性能、处理性能等）；</li><li>XAI 系统即需要告知检测结果，还需要回答下图 (参考 <a href="https://cloud.tencent.com/developer/article/1552173">可信任安全智能与可解释性</a>) 中的 “why” 问题 。</li></ul><p><img src="https://img-blog.csdnimg.cn/9dbd25c463c547c8b62796b511ad26a2.png" alt="XAI 技术的目标"></p><h2 id="3、XAI-安全领域的应用"><a href="#3、XAI-安全领域的应用" class="headerlink" title="3、XAI 安全领域的应用"></a>3、XAI 安全领域的应用</h2><p>在安全领域，XAI 系统同时还需要尽可能的提供威胁的 “上下文”：如提供恶意软件分析中，哪些敏感特征、异常行为会导致模型触发恶意软件的判断 (或提供概率)；针对软件漏洞，哪些代码片段会导致 crash，可能的 patch 有哪些等。</p><p>假设人工智能的能力可划分为 <strong>感知、认知、行动</strong> 三个层面，那么对应到安全领域则是 <strong>检测评估、关联决策、响应反馈</strong> 三个阶段 (参考 <a href="https://cloud.tencent.com/developer/article/1552173">可信任安全智能与可解释性</a>) 。<br>在检测评估阶段 (目前的主要工作)，安全系统/专家需要完成威胁检测、风险评估；在关联决策阶段，需要融入多源异构的数据知识，综合检测结果、风险报告、专家分析等，形成具有可行性的决策方案；在响应反馈阶段，需要落实相关的安全决策，处理存在的安全隐患、威胁事件，同时考量修复后的系统的安全运行能力。<br>XAI 会同步嵌入上述三个阶段，提供具有可解释性的接口和界面，对各阶段的执行细节做出相应的解释，具体的解释如下表 (参考 <a href="https://cloud.tencent.com/developer/article/1552173">可信任安全智能与可解释性</a>) 所示。</p><table><thead><tr><th align="center">安全能力阶段</th><th align="center">技术点</th><th align="center">核心解释能力补充</th></tr></thead><tbody><tr><td align="center">检测/评估</td><td align="center">流量威胁检测</td><td align="center">模型无关的解释性、深度可解释性</td></tr><tr><td align="center">检测/评估</td><td align="center">恶意样本分析</td><td align="center">模型无关的解释性、深度可解释性</td></tr><tr><td align="center">检测/评估</td><td align="center">误报对抗</td><td align="center">建模前数据分析、模型无关的解释性</td></tr><tr><td align="center">检测/评估</td><td align="center">AI 对抗安全</td><td align="center">深度可解释性</td></tr><tr><td align="center">关联/决策</td><td align="center">威胁关联及溯源</td><td align="center">基于图的可解释性</td></tr><tr><td align="center">关联/决策</td><td align="center">攻击团伙分析</td><td align="center">建模前数据分析、基于图的可解释性、深度可解释性</td></tr><tr><td align="center">关联/决策</td><td align="center">自动化指纹提取</td><td align="center">模型无关的解释性</td></tr><tr><td align="center">关联/决策</td><td align="center">智能自动化决策</td><td align="center">基于图的可解释性、深度可解释性</td></tr><tr><td align="center">响应/反馈</td><td align="center">自动化响应</td><td align="center">模型无关的解释性、深度可解释性、人机交互界面</td></tr><tr><td align="center">响应/反馈</td><td align="center">行动推荐</td><td align="center">基于图的可解释性、深度可解释性</td></tr></tbody></table><h2 id="4、Gartner-2021"><a href="#4、Gartner-2021" class="headerlink" title="4、Gartner 2021"></a>4、Gartner 2021</h2><p>Gartner 2021 给定的十大数据与分析技术趋势如下表所示 (<a href="https://www.gartner.com/en/newsroom/press-releases/2021-03-16-gartner-identifies-top-10-data-and-analytics-technologies-trends-for-2021">Gartner Identifies Top 10 Data and Analytics Technology Trends for 2021</a> 、<a href="http://www.ecas.cas.cn/xxkw/kbcd/201115_128697/ml/zjsd/202105/t20210518_4562425.html">2021 年十大数据与分析技术趋势</a>)。</p><table><thead><tr><th align="center">趋势</th><th align="center">中</th><th align="center">英</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">更智能、更负责、可扩展的人工智能</td><td align="center">Smarter, Responsible, Scalable AI</td></tr><tr><td align="center">2</td><td align="center">可组合的数据与分析法</td><td align="center">Composable Data and Analytics</td></tr><tr><td align="center">3</td><td align="center">数据编织架构是基础</td><td align="center">Data Fabric Is the Foundation</td></tr><tr><td align="center">4</td><td align="center">从大数据到小而宽的数据</td><td align="center">From Big to Small and Wide Data</td></tr><tr><td align="center">5</td><td align="center">多样化运维 (Xops)</td><td align="center">XOps</td></tr><tr><td align="center">6</td><td align="center">工程决策智能</td><td align="center">Engineering Decision Intelligence</td></tr><tr><td align="center">7</td><td align="center">数据与分析成为核心业务</td><td align="center">Data and Analytics as a Core Business Function</td></tr><tr><td align="center">8</td><td align="center">图技术关联万物</td><td align="center">Graph Relates Everything</td></tr><tr><td align="center">9</td><td align="center">日益增多的增强型消费者</td><td align="center">The Rise of the Augmented Consumer</td></tr><tr><td align="center">10</td><td align="center">边缘的数据与分析</td><td align="center">Data and Analytics at the Edge</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/295542bc1c6f44e087d59837ac93dc6e.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 模型解释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模型解释二】</title>
      <link href="2021/12/18/20211218-mo-xing-jie-shi-er/"/>
      <url>2021/12/18/20211218-mo-xing-jie-shi-er/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-模型可解释性-SHAP-whale"><a href="#whale-模型可解释性-SHAP-whale" class="headerlink" title=":whale: 模型可解释性 SHAP :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 模型可解释性 SHAP <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、SHAP-简介"><a href="#1、SHAP-简介" class="headerlink" title="1、SHAP 简介"></a>1、SHAP 简介</h2><p>SHAP 全称 <strong>SH</strong>apley <strong>A</strong>dditive ex<strong>P</strong>lanation，发表于 <a href="https://proceedings.neurips.cc/paper/2017/file/8a20a8621978632d76c43dfd28b67767-Paper.pdf">NIPS 2017</a> 。</p><p><img src="https://img-blog.csdnimg.cn/eba17c54584542969b13951884bb1828.png#pic_center" alt="SHAP"></p><p>SHAP 属于模型事后解释的方法。核心思想是计算特征对模型输出的边际贡献，再从全局和局部两个层面对<strong>黑盒模型</strong>进行解释。</p><p>SHAP 示意图如下所示。</p><p><img src="https://img-blog.csdnimg.cn/2a54fb59929246a8a4be97dcb128ee30.png#pic_center" alt="SHAP 示意图"></p><h2 id="2、SHAP-环境配置"><a href="#2、SHAP-环境配置" class="headerlink" title="2、SHAP 环境配置"></a>2、SHAP 环境配置</h2><p>本地环境为 WIndows 10 + python 3.6.2。根据 <a href="https://github.com/slundberg/shap">SHAP source code</a> 直接 <code>pip install shap</code> 即可。</p><h2 id="3、SHAP-测试"><a href="#3、SHAP-测试" class="headerlink" title="3、SHAP 测试"></a>3、SHAP 测试</h2><p>以 <a href="https://github.com/slundberg/shap">SHAP source code</a> 中的 Boston 房价为例，SHAP 可以提供：</p><ul><li>任一样本的各个特征对其类别 (分类概率值) 的贡献大小。</li><li>单个/多个特征的值的大小对模型预测结果的影响。</li><li>参考 <a href="https://zhuanlan.zhihu.com/p/103370775">SHAP 的理解与应用</a> 可以使 SHAP 适用于 one-hot 编码。</li></ul><p><img src="https://img-blog.csdnimg.cn/0a51899bc7574cfb85fdf2bf72fce137.png#pic_center" alt="特征对样本的影响"></p><p><img src="https://img-blog.csdnimg.cn/9b2bdd08072944369b4ccb1c25cec094.png#pic_center" alt="特征对模型的影响"></p><h2 id="4、SHAP-相关参考"><a href="#4、SHAP-相关参考" class="headerlink" title="4、SHAP 相关参考"></a>4、SHAP 相关参考</h2><p>一些参考如下：</p><ul><li><a href="https://yyqing.me/post/2018/2018-09-25-kaggle-model-insights">SHAP in kaggle</a> 。</li><li>Github，<a href="https://github.com/slundberg/shap">SHAP source code</a> 。</li><li>中文博客，<a href="https://blog.csdn.net/weixin_41968505/article/details/119885046">SHAP 模型：可解释机器学习模型</a> ，<a href="https://zhuanlan.zhihu.com/p/103370775">SHAP 的理解与应用</a> ，<a href="https://zhuanlan.zhihu.com/p/64799119">利用 SHAP 解释 Xgboost 模型</a> 。</li><li>图书，<a href="https://christophm.github.io/interpretable-ml-book/">Interpretable Machine Learning</a> ，<a href="http://www.broadview.com.cn/book/6530">可解释机器学习 (译)</a> 。</li><li>Paper，Lundberg, S. M., &amp; Lee, S. I. (2017, December). A unified approach to interpreting model predictions. In Proceedings of the 31st international conference on neural information processing systems (pp. 4768-4777).</li></ul><p><img src="https://img-blog.csdnimg.cn/2d2096ac60c0472796d8c602726790f7.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 模型解释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模型解释一】</title>
      <link href="2021/12/11/20211211-mo-xing-jie-shi-yi/"/>
      <url>2021/12/11/20211211-mo-xing-jie-shi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-模型可解释性-Lemna-whale"><a href="#whale-模型可解释性-Lemna-whale" class="headerlink" title=":whale: 模型可解释性 Lemna :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 模型可解释性 Lemna <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、LEMNA-简介"><a href="#1、LEMNA-简介" class="headerlink" title="1、LEMNA 简介"></a>1、LEMNA 简介</h2><p>给定一个输入样本 x 以及一个分类器，LEMNA (Local Explanation Method using Nolinear Approximation) 尝试去发现那些对于归类 x 起重要作用的关键特征 (权重高/系数大的特征)，且这些关键特征可被理解和解释。</p><p>一些参考如下：</p><ul><li><a href="https://dl.acm.org/doi/abs/10.1145/3243734.3243792">CCS 2018 原文</a> 。</li><li><a href="https://www.youtube.com/watch?v=GX5nTSHfl84">CCS 2018 视频</a> 。</li><li><a href="https://www.inforsec.org/wp/?p=2866">LEMNA 译文</a> ，<a href="https://www.cnblogs.com/bybabo/p/10093996.html">LEMNA 中文博客</a> 。</li><li>Github 1，<a href="https://github.com/nitishabharathi/LEMNA">source code</a> 。</li><li>Github 2，<a href="https://github.com/Henrygwb/Explaining-DL">released code</a> ，<a href="https://kandi.openweaver.com/python/Henrygwb/Explaining-DL">webpage of released code</a> 。</li><li>Paper 1，LEMNA: Explaining Deep Learning based Security Applications Wenbo Guo, Dongliang Mu, Jun Xu, Purui Su, Gang Wang, Xinyu Xing In CCS 2018。</li><li>Paper 2，Explaining Deep Learning Models – A Bayesian Non-parametric Approach Wenbo Guo, Sui Huang, Yunzhe Tao, Xinyu Xing, Lin Lin In NeurIPS 2018。</li><li>周报 2021-03-01_2021-03-14。</li></ul><h2 id="2、LEMNA-环境配置"><a href="#2、LEMNA-环境配置" class="headerlink" title="2、LEMNA 环境配置"></a>2、LEMNA 环境配置</h2><p>本文主要基于 <a href="https://github.com/Henrygwb/Explaining-DL">released code</a> 做测试，因此首先安装该代码中的依赖库 rpy2。</p><p>主要有以下流程：</p><ul><li>安装 R，<a href="https://mirrors.tuna.tsinghua.edu.cn/CRAN/">R-4.1.2 for Windows</a> ，<a href="https://blog.csdn.net/Lvcz233/article/details/85176380">Windows 下安装 R 的详细教程</a> 。</li><li><a href="https://blog.csdn.net/Lq_520/article/details/83856429">设置环境变量 1</a> ，<a href="https://www.cnblogs.com/Xeonilian/p/windows_rpy2_install.html">设置环境变量 2</a> ，具体设置如下。<pre><code> R_HOME --- R 安装的位置，如 C:\Program Files\R\R-4.1.2。 R_LIBS_USER --- R library 所在位置，如 C:\Program Files\R\R-4.1.2\library。 PATH R.dll 所在的位置，如 C:\Program Files\R\R-4.1.2\bin\x64。 R_USER --- 指向 rpy2 (LEMNA 的依赖库) 的路径，如 E:\anaconda\Lib\site-packages\rpy2。</code></pre></li><li>R 安装完成后继续安装 rpy2 库。可参考 <a href="https://www.cnblogs.com/Xeonilian/p/windows_rpy2_install.html">Windows 安装 rpy2</a> ，相关文件下载见 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#rpy2">rpy2 的 whl 文件</a> 。</li></ul><p>如过在 python 命令行输入 <code>import rpy2.robjects as robjects</code> 后不报错，说明 LEMNA 的依赖库 rpy2 安装成功。</p><h2 id="3、LEMNA-代码调试"><a href="#3、LEMNA-代码调试" class="headerlink" title="3、LEMNA 代码调试"></a>3、LEMNA 代码调试</h2><p>由于 <a href="https://github.com/Henrygwb/Explaining-DL">released code</a> 基于 python2 和 R 编写，本文使用的环境为 python 3.6.2，因此主要的 error 集中在 python 2/3 之间的差异和 R 相关库的安装上。另外，其中一些依赖环境还需要参考代码中的 <code>README.md</code> 文件。</p><ul><li>python2 到 python3 的修改 1。<pre><code> (1) print -&gt; print() (2) xrange() -&gt; range() (3) data_train = pickle.load(file((***)) -&gt; with open(***, 'rb') as f: data_train = pickle.load(f) ……</code></pre></li><li>R 相关库的安装。<code>importr('genlasso')</code> 可能会报错，此时需要启动 R 并执行 <code>install.packages('genlasso')</code>，如下所示。<br><img src="https://img-blog.csdnimg.cn/8e515e9fed9d46b0910fbcb272b36c52.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5qC55Y-35Zub562J5LqO5LqM,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="安装 R 库 genlasso"></li><li>python2 到 python3 的修改 2。<pre><code>(1) IndexError: arrays used as indices must be of integer (or boolean) type  self.seq_len / 2 -&gt; int(self.seq_len / 2)</code></pre></li></ul><p><img src="https://img-blog.csdnimg.cn/3d484f31cb4c460ab688276ff6376213.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 模型解释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编译免杀五】</title>
      <link href="2021/11/26/20211126-bian-yi-mian-sha-wu/"/>
      <url>2021/11/26/20211126-bian-yi-mian-sha-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-Android-标注工具一-whale"><a href="#whale-Android-标注工具一-whale" class="headerlink" title=":whale: Android 标注工具一 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Android 标注工具一 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、Android-标注工具"><a href="#1、Android-标注工具" class="headerlink" title="1、Android 标注工具"></a>1、Android 标注工具</h2><p>Android 标注工具 <a href="https://github.com/malicialab/avclass">AVCLASS</a> 发布于 <a href="https://software.imdea.org/~juanca/papers/avclass_raid16.pdf">2016 RAID</a> ，其新版本 <a href="https://github.com/malicialab/avclass">AVCLASS2</a> 发布于 <a href="https://arxiv.org/pdf/2006.10615.pdf">2020 ACSAC</a> 。</p><p>二者的原文引用为：</p><ul><li>“Marcos Sebastián, Richard Rivera, Platon Kotzias, and Juan Caballero. AVClass: A Tool for Massive Malware Labeling[C]. In Proceedings of the International Symposium on Research in Attacks, Intrusions and Defenses, September 2016.”。</li><li>“Silvia Sebastián, Juan Caballero. AVClass2: Massive Malware Tag Extraction from AV Labels[C]. In proceedings of the Annual Computer Security Applications Conference, December 2020.”。</li></ul><h2 id="2、AVCLASS-vs-AVCLASS2"><a href="#2、AVCLASS-vs-AVCLASS2" class="headerlink" title="2、AVCLASS vs. AVCLASS2"></a>2、AVCLASS vs. AVCLASS2</h2><p>AVCLASS 和 AVCLASS2 都用于标注 Android malware family。作者及其团队 (<a href="https://software.imdea.org/">IMDEA Software Institute</a>) 推荐使用可以提供更多信息的 AVCLASS2。</p><p>二者输出的信息如下：</p><ul><li>AVCLASS 只提供 family names (i.e.，family tags)。</li><li>AVCLASS2 除 family names 之外，还可以额外提供 malware class (e.g.，worm，ransomware，grayware)，behaviors (e.g.，spam，ddos) 和 file properties (e.g.，packed，themida，bundle，nsis)。</li></ul><p>对于 family names 而言，AVCLASS2 会输出多个所属 family names，而 AVCLASS 只输出一个。并且<strong>二者输出的 family name 也不一定相同</strong>。</p><p>作者在 <a href="https://github.com/malicialab/avclass">Github</a> 中给出了这样的陈述 “AVClass is no longer updated and may be deprecated in the near future. For example, we add family aliases and generic terms from time to time for AVClass2, but we are not currently adding them for AVClass.”。</p><h2 id="3、使用示例一"><a href="#3、使用示例一" class="headerlink" title="3、使用示例一"></a>3、使用示例一</h2><p>两种工具都支持 VirusTotal v2 API JSON reports (-vt file)。以下示例仅以 AVCLASS2 为例，如使用 AVCLASS 只需替换 <code>./avclass2/avclass2_labeler.py</code> 为 <code>./avclass/avclass_labeler.py</code>。</p><p>vtv2 sample 详见 <a href="https://github.com/malicialab/avclass">Github</a> 中提供的 <code>avclass-master/examples/vtv2_sample.json</code> 文件。</p><p>其使用示例如下 (Windows)：</p><pre><code>    python ./avclass2/avclass2_labeler.py -vt examples/vtv2_sample.json -p &gt; examples/vtv2_output.txt</code></pre><p>控制台输出日志可参考如下 (Windows)：</p><pre><code>    [-] Using tagging rules in C:\Users\*\Desktop\avclass-master\avclass2\data/default.tagging    [-] Using taxonomy in C:\Users\*\Desktop\avclass-master\avclass2\data/default.taxonomy    [-] Using expansion tags in C:\Users\*\Desktop\avclass-master\avclass2\data/default.expansion    [-] Processing input file examples/vtv2_sample.json    [-] 2 JSON read    [-] Samples: 2 NoScans: 0 NoTags: 0 GroundTruth: 0</code></pre><p>输出结果如下 (<code>avclass-master/examples/vtv2_output.txt</code>)：</p><pre><code>    602695c8f2ad76564bddcaf47b76edff    52    FAM:zeroaccess|19,FILE:os:windows|16,BEH:server|8,CLASS:backdoor|8,FILE:packed|7    f117cc1477513cb181cc2e9fcaab39b2    39    CLASS:rogueware|15,BEH:alertuser|15,FILE:os:windows|11,FAM:winwebsec|4,CLASS:grayware|4,CLASS:grayware:tool|3,FILE:packed|3</code></pre><h2 id="4、使用示例二"><a href="#4、使用示例二" class="headerlink" title="4、使用示例二"></a>4、使用示例二</h2><p>两种工具都支持 VirusTotal v3 API JSON reports (-vt file -vt3)。以下示例仅以 AVCLASS2 为例，如使用 AVCLASS 只需替换 <code>./avclass2/avclass2_labeler.py</code> 为 <code>./avclass/avclass_labeler.py</code>。</p><p>vtv3 sample 详见 <a href="https://github.com/malicialab/avclass">Github</a> 中提供的 <code>avclass-master/examples/vtv3_sample.json</code> 文件。</p><p>其使用示例如下 (Windows)：</p><pre><code>    python ./avclass2/avclass2_labeler.py -vt examples/vtv3_sample.json -p -vt3 &gt; examples/vtv3_output.txt</code></pre><p>控制台输出日志可参考如下 (Windows)：</p><pre><code>    [-] Using tagging rules in C:\Users\*\Desktop\avclass-master\avclass2\data/default.tagging    [-] Using taxonomy in C:\Users\*\Desktop\avclass-master\avclass2\data/default.taxonomy    [-] Using expansion tags in C:\Users\*\Desktop\avclass-master\avclass2\data/default.expansion    [-] Processing input file examples/vtv3_sample.json    [-] 1 JSON read    [-] Samples: 1 NoScans: 0 NoTags: 0 GroundTruth: 0</code></pre><p>输出结果如下 (<code>avclass-master/examples/vtv3_output.txt</code>)：</p><pre><code>    5e31d16d6bf35ea117d6d2c4d42ea879    35    FILE:exploit|10,BEH:execdownload|3,CLASS:downloader|3,FILE:os:windows|2</code></pre><h2 id="5、使用示例三-AVCLASS2"><a href="#5、使用示例三-AVCLASS2" class="headerlink" title="5、使用示例三 (AVCLASS2)"></a>5、使用示例三 (AVCLASS2)</h2><p>AVCLASS2 支持简化后的 JSON reports，但该 report 必须至少包含 md5，sha1，sha256 和 av_labels。</p><p>其 sample 详见 <a href="https://github.com/malicialab/avclass">Github</a> 中提供的 <code>avclass-master/examples/malheurReference_lb.json</code> 文件。</p><p>其使用示例如下 (Windows)，不加重定向 <code>&gt;</code> 则只会在控制台输出标注结果：</p><pre><code>    python ./avclass2/avclass2_labeler.py -lb examples/malheurReference_lb.json -p &gt; examples/av2_output.txt</code></pre><p>控制台输出日志可参考如下 (Windows)：</p><pre><code>    [-] Using tagging rules in C:\Users\*\Desktop\avclass-master\avclass2\data/default.tagging    [-] Using taxonomy in C:\Users\*\Desktop\avclass-master\avclass2\data/default.taxonomy    [-] Using expansion tags in C:\Users\*\Desktop\avclass-master\avclass2\data/default.expansion    [-] Processing input file examples/malheurReference_lb.json    [-] 3131 JSON read    [-] Samples: 10 NoScans: 0 NoTags: 0 GroundTruth: 0</code></pre><p>部分输出结果如下 (<code>avclass-master/examples/av2_output.txt</code>)：</p><pre><code>    aca2d12934935b070df8f50e06a20539    33    CLASS:grayware|9,CLASS:grayware:adware|9,FILE:os:windows|8,FAM:adrotator|8,BEH:execdownload|3,CLASS:downloader|3,FAM:zlob|2    67d15459e1f85898851148511c86d88d    37    CLASS:dialer|23,BEH:dials|18,FILE:os:windows|9,FAM:adultbrowser|8,CLASS:dialer:porndialer|7,CLASS:grayware|6,CLASS:grayware:tool|3,FAM:target|2</code></pre><h2 id="6、使用示例四-AVCLASS"><a href="#6、使用示例四-AVCLASS" class="headerlink" title="6、使用示例四 (AVCLASS)"></a>6、使用示例四 (AVCLASS)</h2><p>AVCLASS 同样支持简化后的 JSON reports，其与 AVCLASS2 的区别主要在于输出结果之间的差异。</p><p>其使用示例如下 (Windows)，不加重定向 <code>&gt;</code> 则只会在控制台输出标注结果：</p><pre><code>    python ./avclass/avclass_labeler.py -lb examples/malheurReference_lb.json &gt; examples/av_output.txt</code></pre><p>控制台输出日志可参考如下 (Windows)：</p><pre><code>    [-] Using aliases in C:\Users\*\Desktop\avclass-master\avclass\data/default.aliases    [-] Using generic tokens in C:\Users\*\Desktop\avclass-master\avclass\data/default.generics    [-] Processing input file examples/malheurReference_lb.json    [-] 3131 JSON read    [-] Samples: 3131 NoLabels: 0 Singletons: 141 GroundTruth: 0</code></pre><p>部分输出结果如下 (<code>avclass-master/examples/av_output.txt</code>)：</p><pre><code>    aca2d12934935b070df8f50e06a20539    adrotator    67d15459e1f85898851148511c86d88d    adultbrowser</code></pre><p><img src="https://img-blog.csdnimg.cn/e05ebe287ed74f12981b52a77ae3f30d.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编译免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编译免杀四】</title>
      <link href="2021/11/25/20211125-bian-yi-mian-sha-si/"/>
      <url>2021/11/25/20211125-bian-yi-mian-sha-si/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-Android-检测工具一-whale"><a href="#whale-Android-检测工具一-whale" class="headerlink" title=":whale: Android 检测工具一 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Android 检测工具一 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、VirusTotal-简介"><a href="#1、VirusTotal-简介" class="headerlink" title="1、VirusTotal 简介"></a>1、VirusTotal 简介</h2><p><a href="https://www.virustotal.com/gui/home/upload">VirusTotal</a> 可以用于检测 files 或者 URL，并生成相应的 report。</p><p>对于 Android application 而言，VirusTotal 可以提供多达 70 个杀软 (anti-virus tool) 的检测结果及相应的 report。</p><h2 id="2、VirusTotal-使用方式"><a href="#2、VirusTotal-使用方式" class="headerlink" title="2、VirusTotal 使用方式"></a>2、VirusTotal 使用方式</h2><p>VirusTotal 的 python 库为 <a href="https://pypi.org/project/vt/">vt</a> ，官方文档为 <a href="https://developers.virustotal.com/reference/overview">VirusTotal API v3 reference</a>。</p><p>在 <a href="https://developers.virustotal.com/reference/public-vs-premium-api">申请</a> 得到 VirusTotal 的 API 后，可以通过 <a href="https://github.com/doomedraven/VirusTotalApi">调用 python 库</a> 的方式使用，也可以通过 <a href="https://blog.csdn.net/singleyellow/article/details/86697709">官方文档示例</a> 的方式进行 malware detection。</p><p>本文根据官方文档示例展开介绍，共分为以下四步：</p><ul><li>步骤一，获取 API key。</li><li>步骤二，获取 malware MD5。</li><li>步骤三，获取 report 所需的 URL。</li><li>步骤四，根据以上三者完成代码并检测。</li></ul><h2 id="3、步骤一"><a href="#3、步骤一" class="headerlink" title="3、步骤一"></a>3、步骤一</h2><p>获取 API key。参考博客 <a href="https://blog.csdn.net/singleyellow/article/details/86697709">Python 代码实现访问 VirusTotal，获取杀软结果</a> 。</p><p>本文使用 VirusTotal 为 Cuckoo Sandbox 提供的 API key <a href="https://cuckoo.sh/docs/installation/host/configuration.html">cuckoo vt API key</a> ，如下所示。</p><pre><code>    a0283a2c3d55728300d064874239b5346fb991317e8449fe43c902879d******</code></pre><h2 id="4、步骤二"><a href="#4、步骤二" class="headerlink" title="4、步骤二"></a>4、步骤二</h2><p>获取 malware MD5。参考博客 <a href="https://www.cnblogs.com/milesre/p/10154326.html">批量生成文件夹内所有文件 md5</a> 。</p><p>博客作者基于 windows 命令编写了一个批量生成 MD5 值的脚本。把以下代码放入 <code>get_md5.bat</code> 文件中，再把 <code>get_md5.bat</code> 放入需要批量生成 MD5 的文件夹内。运行 <code>get_md5.bat</code> 文件即可得到存储当前文件夹内所有文件 MD5 值的 <code>MD5.txt</code> 文件。</p><pre><code>    title md5批量生成脚本-by miles    setlocal enabledelayedexpansion    %~d0    cd %~dp0    if exist 1234.txt del 1234.txt    for /R %%s in (.,*) do (    echo %%s    ) &gt;&gt;1234.txt    if exist md5.txt del md5.txt    for /f "skip=1" %%a in (1234.txt) do certutil -hashfile %%a MD5&gt;&gt;md5.txt         echo md5生成完毕</code></pre><h2 id="5、步骤三"><a href="#5、步骤三" class="headerlink" title="5、步骤三"></a>5、步骤三</h2><p>获取 report 所需的 URL：</p><ul><li>VirusTotal v2 API，<code>'https://www.virustotal.com/vtapi/v2/file/report?resource={}&amp;apikey={}'.format(md5, apikey)</code>，参考博客 <a href="https://blog.csdn.net/singleyellow/article/details/86697709">Python 代码实现访问 VirusTotal，获取杀软结果</a> 。</li><li>VirusTotal v3 API，<code>'https://www.virustotal.com/api/v3/files/{}'.format(md5)</code>，参考 <a href="https://developers.virustotal.com/reference/objects">VT api Objects</a> ，如下图所示：</li></ul><p><img src="https://img-blog.csdnimg.cn/8cf3403a2d844659bb3d487efa1e365d.png#pic_center" alt="VirusTotal v3 API URL"></p><h2 id="6、步骤四"><a href="#6、步骤四" class="headerlink" title="6、步骤四"></a>6、步骤四</h2><p>根据 MD5、API key 和 URL 完成代码并检测 (生成 report)。预期生成一个 <a href="https://ask.csdn.net/questions/7491577">格式化 (一行) 后的 json 文件</a> ，这里设定为一行是为了便于接下来 <a href="https://daojuhecheng.github.io/2021/11/26/20211123-bian-yi-mian-sha-wu/">使用 AVCLASS2 标注 malware family name</a> 。</p><p>示例代码如下：</p><pre><code>    import json    import requests    # settings    apikey = "a0283a2c3d55728300d064874239b5346fb991317e8449fe43c902879d******"  # cuckoo vt api key    md5 = "5e31d16d6bf35ea117d6d2c4d42ea879"  # md5    url = 'https://www.virustotal.com/api/v3/files/{}'.format(md5)  # url    # get report    session = requests.Session()    session.headers = {'X-Apikey': apikey}    response = session.get(url)  # requests.models.Response    json_data = json.loads(response.text)  # str (response.text) to dict (json_data)    # save report by json, one line show    with open('./report.json', 'w', encoding='utf-8') as f:        json.dump(json_data, f)</code></pre><p>所得文件如下所示：</p><p><img src="https://img-blog.csdnimg.cn/8e2aa01b4dfa4793b72d0999eb0b0659.png#pic_center" alt="VirusTotal v3 API report (json)"></p><h2 id="7、VirusTotal-下载-Android-malware"><a href="#7、VirusTotal-下载-Android-malware" class="headerlink" title="7、VirusTotal 下载 Android malware"></a>7、VirusTotal 下载 Android malware</h2><p>基于 VirusTotal 下载 Android malware 可参考 <a href="https://github.com/cuckoosandbox/cuckoo/blob/master/cuckoo/common/virustotal.py">Cuckoo virustotal.py</a> 和 <a href="https://www.cnblogs.com/bonelee/p/9154644.html">从 virustotal 上下载病毒样本</a> 。</p><p><img src="https://img-blog.csdnimg.cn/a197d1026431415ea182bbd29516bff1.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编译免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编译免杀三】</title>
      <link href="2021/11/02/20211102-bian-yi-mian-sha-san/"/>
      <url>2021/11/02/20211102-bian-yi-mian-sha-san/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-Android-数据集-AndroZoo-whale"><a href="#whale-Android-数据集-AndroZoo-whale" class="headerlink" title=":whale: Android 数据集 AndroZoo :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Android 数据集 AndroZoo <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、AndroZoo-简介"><a href="#1、AndroZoo-简介" class="headerlink" title="1、AndroZoo 简介"></a>1、AndroZoo 简介</h2><p>Android app 数据集 <a href="https://androzoo.uni.lu/">AndroZoo</a> 发布于 2016 MSR，且持续更新。截至 2021 ‎年 ‎7‎ 月 ‎17‎ 日共有 15877038 个 app。<br>其原文引用为 “Allix K, Bissyandé T F, Klein J, et al. Androzoo: Collecting millions of android apps for the research community[C]. 2016 IEEE/ACM 13th Working Conference on Mining Software Repositories (MSR). IEEE, 2016: 468-471.”。</p><h2 id="2、AndroZoo-app-size"><a href="#2、AndroZoo-app-size" class="headerlink" title="2、AndroZoo app size"></a>2、AndroZoo app size</h2><p>AndroZoo app size 分布如下表所示。其中平均 app size 约为 12MB。</p><table><thead><tr><th></th><th>count</th><th>mean</th><th>std</th><th>min</th><th>25%</th><th>50%</th><th>75%</th><th>max</th></tr></thead><tbody><tr><td>App size (MB)</td><td>14210484</td><td>11.98778</td><td>14.16921</td><td>0.0031</td><td>3.4992</td><td>7.3705</td><td>15.7156</td><td>608.259</td></tr></tbody></table><h2 id="3、AndroZoo-app-market"><a href="#3、AndroZoo-app-market" class="headerlink" title="3、AndroZoo app market"></a>3、AndroZoo app market</h2><p>AndroZoo app market 分布如图 1 所示。其中提供最多 app (11819640) 的 market 为 play.google.com (Google Play)。</p><p><img src="https://img-blog.csdnimg.cn/6fa7c21fb25c4dc19f3ba3d1def1ae5f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5qC55Y-35Zub562J5LqO5LqM,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="图 1. AndroZoo app market 分布情况"></p><h2 id="4、AndroZoo-app-year"><a href="#4、AndroZoo-app-year" class="headerlink" title="4、AndroZoo app year"></a>4、AndroZoo app year</h2><p>AndroZoo app year 分布如图 2 所示。除 1980 年之外出现 app 最多 (1770202) 的 year 为 2014 年。有接近一半的 Google Play 中的 app 的时间标注为 1980。</p><p><img src="https://img-blog.csdnimg.cn/81ecbe8b89e44853a6baa20c55065b81.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5qC55Y-35Zub562J5LqO5LqM,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="图 2. AndroZoo app year 分布情况"></p><h2 id="5、AndroZoo-app-download"><a href="#5、AndroZoo-app-download" class="headerlink" title="5、AndroZoo app download"></a>5、AndroZoo app download</h2><p>使用 python 提供的包 <a href="https://pypi.org/project/azoo/">azoo</a> (<code>pip install azoo</code>) 配合 AndroZoo 提供的 API KEY (邮件申请)，即可下载数据。部分参数如下所示。</p><pre><code>    '--number', '-n', type=click.INT, help='Number of apks to download.'    '--dexdate', '-d', help='The date on a dex file, format %Y-%m-%d, e.g. 2015-10-03.'    '--apksize', '-s', help='Apk size, in bytes.'    '--vtdetection', '-vt', help='Virus total rating, integer.'    '--pkgname', '-pn', help='Package names.'    '--markets', '-m', help='Markets, e.g. play.google.com. Possible values (can differ, since repository is updating): 1mobile,angeeks,anzhi,apk_bang,appchina,fdroid,freewarelovers,genome,hiapk,markets,mi.com,play.google.com,proandroid,slideme,torrents.'    '--sha256', help='SHA256 hashes of apks to download.'    '--sha1', help='SHA1 hashes of apks to download.'    '--md5', help='MD5 hashes of apks to download.'    '--metadata', '-md', help='Metadata. This is a subset of latest.csv column names to keep in metadata.csv. By default sha256,pkg_name,apk_size,dex_date,markets.'    '--out', '-o', help='Output folder name. By default current directory.'    '--seed', '-sd', type=click.INT, help='Seed for a random algorithm.'    '--key', '-k', help='Androzoo api key.'    '--input-file', '-i', help='Path to input csv.'    '--threads', '-t', type=click.INT, default=4, help='Number of threads for concurrent download. 4 by default.'</code></pre><p>注：其中 <code>dexdate, apksize and vtdetection require specifying lower and upper bounds in format lower:upper, both inclusive.</code>。</p><h2 id="6、AndroZoo-app-download-示例"><a href="#6、AndroZoo-app-download-示例" class="headerlink" title="6、AndroZoo app download 示例"></a>6、AndroZoo app download 示例</h2><p>使用命令 <code>az -n 10 -d 2015-12-11: -s :3000000 -m play.google.com,appchina</code> 即表示：</p><ul><li>app 起始日期为 2015-12-11，终止日期未设置；</li><li>app 最小未设置，最大为 3000000 byte；</li><li>app 来源为 play.google.com 或 appchina；</li><li>app 数量为 10。</li></ul><p><img src="https://img-blog.csdnimg.cn/b2e7654632784226aa7468a233eb5965.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编译免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编译免杀二】</title>
      <link href="2021/09/26/20210926-bian-yi-mian-sha-er/"/>
      <url>2021/09/26/20210926-bian-yi-mian-sha-er/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-Android-反编译工具-Androguard-使用简介-whale"><a href="#whale-Android-反编译工具-Androguard-使用简介-whale" class="headerlink" title=":whale: Android 反编译工具 Androguard 使用简介 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Android 反编译工具 Androguard 使用简介 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、Androguard-—-Windows-安装"><a href="#1、Androguard-—-Windows-安装" class="headerlink" title="1、Androguard — Windows 安装"></a>1、Androguard — Windows 安装</h2><p>Windows 已经预装 python 3.6.2，conda 4.6.11，pycharm，jdk 1.8.0_101 等环境和工具。</p><p>安装非 GUI 版本的 Androguard，直接 <code>pip install androguard</code> 即可。其中可能会有某些包版本报错。但只要不影响主要功能执行，可忽略此类 error。</p><p>安装非 GUI 版本的 Androguard 可参考 <a href="https://androguard.readthedocs.io/en/latest/intro/installation.html">Androguard installation</a> 。</p><p><img src="https://img-blog.csdnimg.cn/6de36926f7554a31acbf1958d40b7edb.png#pic_center" alt="Androguard"></p><h2 id="2、Androguard-使用"><a href="#2、Androguard-使用" class="headerlink" title="2、Androguard 使用"></a>2、Androguard 使用</h2><p>基本的操作包括：</p><ul><li>Session 的使用方法，<a href="https://androguard.readthedocs.io/en/latest/intro/sessions.html">Working with Sessions</a> 。</li><li>取 app 基本信息，<a href="https://androguard.readthedocs.io/en/latest/intro/gettingstarted.html">Getting Started</a> ，包括 app name、permission、components、sdk version、manifest file、classes 等。</li><li>取 app method，<a href="https://androguard.readthedocs.io/en/latest/intro/xrefs.html">Crossreferences (XREFs)</a> 。</li><li>取 app CFG (control flow graph)，<a href="https://androguard.readthedocs.io/en/latest/intro/basicblocks.html">Basic Blocks</a> 。</li><li>取 app signature information，<a href="https://androguard.readthedocs.io/en/latest/intro/certificates.html">Android Signing Certificates</a> ，包括 signature time、md5、sha1 等。</li><li>取 app signature time 推荐使用 ldk 自带的 keytool 证书工具，<a href="https://www.cnblogs.com/zhi-leaf/p/10418222.html">keytool 证书工具详解</a> 。</li></ul><h2 id="3、Androguard-使用注意事项"><a href="#3、Androguard-使用注意事项" class="headerlink" title="3、Androguard 使用注意事项"></a>3、Androguard 使用注意事项</h2><ul><li>使用 session 做反编译时，需要使用 <code>sess.reset()</code> 释放内存。</li><li>Androguard 取到的 app method 为 smali 格式，如需 java 格式，需要做进一步转换。</li><li>由于 Androguard 自身只更新至 Android API level 28，因此解析 level 大于 28 的 app 时，会出现 warning <code>Requested API level 29 is larger than maximum we have, returning API level 28 instead.</code>。</li><li>上述 warning 可能会导致无法解析或处理较新的 features，但目前尚未发现较大的 features 遗漏问题。</li></ul><p><img src="https://img-blog.csdnimg.cn/b3824082527846ee85c4998dddd0ffda.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编译免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编译免杀一】</title>
      <link href="2021/09/16/20210916-bian-yi-mian-sha-yi/"/>
      <url>2021/09/16/20210916-bian-yi-mian-sha-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-Android-反编译工具-Androguard-使用简介-whale"><a href="#whale-Android-反编译工具-Androguard-使用简介-whale" class="headerlink" title=":whale: Android 反编译工具 Androguard 使用简介 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Android 反编译工具 Androguard 使用简介 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、Androguard-—-Android-decompiling-tool"><a href="#1、Androguard-—-Android-decompiling-tool" class="headerlink" title="1、Androguard — Android decompiling tool"></a>1、Androguard — Android decompiling tool</h2><p><a href="https://github.com/androguard/androguard">Androguard</a> is a full python tool to play with Android files. It is designed to work with Python 3 only.</p><pre><code>- DEX, ODEX- APK- Android’s binary xml- Android resources- Disassemble DEX/ODEX bytecodes- Decompiler for DEX/ODEX files</code></pre><p>其官方文档为 <a href="https://androguard.readthedocs.io/en/latest/index.html">Andruguard documentation</a> 。</p><p>最新版本的 Androguard (update on 24 Nov 2020) 集成了 <a href="https://github.com/reddr/axplorer">axplorer</a> (对应提供了 API-permission mapping of Android API level 25)。而 Androguard 自身则更新至 Android API level 28。</p><p><img src="https://img-blog.csdnimg.cn/0f811f03df4f42fe8a5669af5c13a7aa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5qC55Y-35Zub562J5LqO5LqM,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="Androguard"></p><h2 id="2、Androguard-安装"><a href="#2、Androguard-安装" class="headerlink" title="2、Androguard 安装"></a>2、Androguard 安装</h2><p>Linux OS 下安装：</p><ul><li><p>Ubuntu 18.04。下载 github 源码后切好路径，然后执行 <code>python3 setup.py install</code>。然后执行<code>androguard</code>命令判断是否安装成功，此时可能会因为缺如下某个或某些包导致报错。依次 <code>pip install ***</code> 安装即可。</p><pre><code>networkx&gt;=2.2pygments&gt;=2.3.1lxml&gt;=4.3.0colorama&gt;=0.4.1matplotlib&gt;=3.0.2asn1crypto&gt;=0.24.0click&gt;=7.0pydot&gt;=1.4.1ipython&gt;=5.0.0</code></pre></li><li><p><a href="https://santoku-linux.com/">santoku</a> ，该 Linux OS 自带 Androguard。而且集成了 androapkinfo 等命令，方便好用，可参考 <a href="https://www.cnblogs.com/4-312/p/3962164.html">开源静态分析工具 Androguard 体验</a> 。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/c4cafbef010b4b4399e69758f577ad1c.png#pic_center" alt="santoku"></p><h2 id="3、Androguard-使用一"><a href="#3、Androguard-使用一" class="headerlink" title="3、Androguard 使用一"></a>3、Androguard 使用一</h2><p>santoku OS 中直接写脚本调用 androapkinfo 等命令遍历反编译 app 即可。代码示例如下：</p><pre><code>for i in `ls *`do    echo $i "start."    /*/androguard/androapkinfo.py -i /*/apk/playdrone-apk-52/$i &gt; /*/info/playdrone-apk-52-info/$i.info    echo $i "stop."done</code></pre><p>但这里存在一个问题，最新的 santoku OS 自带的 androguard 仅能解出来 30% 左右的 app，远小于 apktool 90%+ 的解出率。</p><h2 id="4、Androguard-使用二"><a href="#4、Androguard-使用二" class="headerlink" title="4、Androguard 使用二"></a>4、Androguard 使用二</h2><p>继续尝试 Windows 10 下安装最新版本的 Androguard，然后通过调包的方式写 python 代码处理，即通过 <a href="https://androguard.readthedocs.io/en/latest/intro/sessions.html">Working with Sessions</a> 的方式查看 app 的解出率。</p><p>该解出率一定程度上决定是否采用 Androguard 来反编译 app 抽取信息，否则退回继续使用 <a href="https://ibotpeaches.github.io/Apktool/">Apktool</a> 进行反编译工作。</p><p><img src="https://img-blog.csdnimg.cn/6fcb917af4324625b40d4553b406ae2a.png#pic_center" alt="Apktool"></p><p><img src="https://img-blog.csdnimg.cn/3a69a4273a874b38b60ca5bf13fdf080.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编译免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【技术探索五】</title>
      <link href="2021/06/01/20210601-ji-zhu-tan-suo-wu/"/>
      <url>2021/06/01/20210601-ji-zhu-tan-suo-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-图数据库-neo4j-Desktop-版使用简介-whale"><a href="#whale-图数据库-neo4j-Desktop-版使用简介-whale" class="headerlink" title=":whale: 图数据库 neo4j Desktop 版使用简介 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 图数据库 neo4j Desktop 版使用简介 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、视频教程"><a href="#1、视频教程" class="headerlink" title="1、视频教程"></a>1、视频教程</h2><p><a href="https://space.bilibili.com/409991169/video">武汉大学张曙光 - neo4j</a> ，哔哩哔哩可观看，一直更新中。</p><h2 id="2、官方文档"><a href="#2、官方文档" class="headerlink" title="2、官方文档"></a>2、官方文档</h2><ul><li><p><a href="https://neo4j.com/docs/">官方文档 - neo4j</a> 。</p></li><li><p><a href="https://neo4j.com/docs/pdf/neo4j-cypher-manual-4.2.pdf">cypher 语法文档 - neo4j</a> 。</p></li><li><p><a href="https://neo4j.com/docs/pdf/cypher-refcard-4.2.pdf">cypher ref card - neo4j</a> ，日常命令可参考此手册。</p></li></ul><h2 id="3、图文教程"><a href="#3、图文教程" class="headerlink" title="3、图文教程"></a>3、图文教程</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/88745411">neo4j 单个节点和边的导入 - neo4j</a> 。</p></li><li><p><a href="https://www.cnblogs.com/bluetree2/p/10446522.html?utm_source=tuicool">neo4j csv 节点和边文件导入 - neo4j</a> 。</p></li></ul><h2 id="4、注意事项"><a href="#4、注意事项" class="headerlink" title="4、注意事项"></a>4、注意事项</h2><ul><li><p>neo4j 默认预览设置 MATCH (n) RETURN n LIMIT 25，但是去掉 LIMIT 25 其上限仍有 300 的限制，此时需要做如下修改：<br><img src="https://img-blog.csdnimg.cn/20210601115353575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ppbW9zYW5ndGlhbg==,size_16,color_FFFFFF,t_70" alt="Limitation Setting"></p></li><li><p>如果节点名称过长无法全部显示，可以添加空格使其换行显示，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20210601115611780.png" alt="Node Name"></p></li><li><p>导入 csv 的 cypher 命令可以加入 “;”， 并设置不同的 “as linex” 进行批处理，代码如下：</p><pre><code>load csv with headers from 'file:///test1.csv' as line1create (:Node1 {name: line1.node, attribute:line1.attribute});load csv with headers from 'file:///test2.csv' as line2create (:Node2 {name: line2.node, attribute:line2.attribute});</code></pre></li><li><p>更新节点属性，代码如下：</p><pre><code>load csv with headers from 'file:///test3.csv' as line1match (n:Node1) where n.name = line1.node set n.attribute1 = line1.attribute1, n.attribute2=line1.attribute2 return n;</code></pre></li></ul><p><img src="https://img-blog.csdnimg.cn/20210601115930711.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【技术探索四】</title>
      <link href="2021/04/17/20210416-ji-zhu-tan-suo-si/"/>
      <url>2021/04/17/20210416-ji-zhu-tan-suo-si/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-NLP-标注工具-doccano-使用简版教程-whale"><a href="#whale-NLP-标注工具-doccano-使用简版教程-whale" class="headerlink" title=":whale: NLP 标注工具 doccano 使用简版教程 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> NLP 标注工具 doccano 使用简版教程 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、本地环境配置"><a href="#1、本地环境配置" class="headerlink" title="1、本地环境配置"></a>1、本地环境配置</h2><p>VMware 16.1.0 + Ubuntu 18.0 + doccano（一般取最新版本）。其中 doccano 官方 Github 为 <a href="https://github.com/doccano/doccano">doccano-Github</a>。</p><h2 id="2、设置-input-output-data-格式"><a href="#2、设置-input-output-data-格式" class="headerlink" title="2、设置 input/output data 格式"></a>2、设置 input/output data 格式</h2><p>由于安装在 root 下，所以先 sudo su - 切换到 root，再执行命令 doccano。</p><ul><li>input 选择 csv 格式，设置格式为：</li></ul><pre><code>text,label"Terrible customer service.","negative""Really great transaction.","positive""Great price.","positive"</code></pre><ul><li>output 选择 csv 格式，导出格式为（官网样例，实际使用时会更详细）：</li></ul><pre><code>id,text,label,user1,"Terrible customer service.",1,12,"Really great transaction.",2,13,"Great price.",2,1</code></pre><h2 id="3、设置-label-格式"><a href="#3、设置-label-格式" class="headerlink" title="3、设置 label 格式"></a>3、设置 label 格式</h2><ul><li>label 规模不大时手工提取设置即可。</li><li>其 json 格式为（官网样例，实际使用时会更详细）：</li></ul><pre><code>[    {        "text": "Dog",        "suffix_key": "a",        "background_color": "#FF0000",        "text_color": "#ffffff"    },    {        "text": "Cat",        "suffix_key": "c",        "background_color": "#FF0000",        "text_color": "#ffffff"    }]</code></pre><h2 id="4、其他设置"><a href="#4、其他设置" class="headerlink" title="4、其他设置"></a>4、其他设置</h2><p>其他设置。</p><ul><li>分类、标注、翻译三种任务在初始创建工程时可按需选择。</li><li>Members 可以管理参与者账号。</li><li>Statistics 可以查看标注量和未标注量。</li></ul><p><img src="https://img-blog.csdnimg.cn/2021041620432065.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【技术探索三】</title>
      <link href="2021/04/16/20210416-ji-zhu-tan-suo-san/"/>
      <url>2021/04/16/20210416-ji-zhu-tan-suo-san/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-NLP-标注工具-doccano-安装简版教程-whale"><a href="#whale-NLP-标注工具-doccano-安装简版教程-whale" class="headerlink" title=":whale: NLP 标注工具 doccano 安装简版教程 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> NLP 标注工具 doccano 安装简版教程 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、本地环境配置"><a href="#1、本地环境配置" class="headerlink" title="1、本地环境配置"></a>1、本地环境配置</h2><p>VMware 16.1.0 + Ubuntu 18.0 + doccano（一般取最新版本）。其中 doccano 官方 Github 为 <a href="https://github.com/doccano/doccano">doccano-Github</a> 。</p><h2 id="2、VMware-和-Ubuntu-相关安装"><a href="#2、VMware-和-Ubuntu-相关安装" class="headerlink" title="2、VMware 和 Ubuntu 相关安装"></a>2、VMware 和 Ubuntu 相关安装</h2><p>VMware 16 中安装 Ubuntu 18 参考<a href="https://www.cnblogs.com/swjian/p/9193478.html">教程</a> 。</p><ul><li>如果遇到 VMware Tools 的问题（如图 1 所示），比如无法从本地拖入 VMware，此时更新 VMware 至最新版即可，<a href="https://zhidao.baidu.com/question/494922921610023452.html">参考链接</a> 。</li><li>另外，如果无法打开安装的 Ubuntu，可以<a href="https://www.cnblogs.com/Komorebi-john/p/11381053.html">参考链接</a> 。</li><li>经测试，使用解决办法三的第五步（如图 2 所示，禁用 + 启动） + 重启也可以解决无法打开 Ubuntu 的问题。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210416185602132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ppbW9zYW5ndGlhbg==,size_16,color_FFFFFF,t_70#pic_center" alt="图 1. VMware Tools 传文件卡图"><br><img src="https://img-blog.csdnimg.cn/20210416190636795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ppbW9zYW5ndGlhbg==,size_16,color_FFFFFF,t_70#pic_center" alt="图 2. 解决办法三的第五步"></p><h2 id="3、doccano-安装参考一"><a href="#3、doccano-安装参考一" class="headerlink" title="3、doccano 安装参考一"></a>3、doccano 安装参考一</h2><p>参考配置流程，<a href="https://mp.weixin.qq.com/s?__biz=MzAwNjU0NjA3Ng==&amp;mid=2247487635&amp;idx=1&amp;sn=6cb73bccfdef2545d83afc3d7c583eb5&amp;chksm=9b0ae760ac7d6e7695cac8d30dfebe3e62a0b3a59b80dbed8d96ad99c1b2bf23469861b0a7f7&amp;token=466293760&amp;lang=zh_CN#rd">详细版</a> 。</p><ul><li>其中所有 pip 命令需要修改为 pip3 命令（Ubuntu 18.0 默认 python3），否则可能出现某些包安装 error，如 Django==2.2.13 等。</li><li>遇到的 error 一般 Baidu + Google 可解。</li></ul><h2 id="4、doccano-安装参考二"><a href="#4、doccano-安装参考二" class="headerlink" title="4、doccano 安装参考二"></a>4、doccano 安装参考二</h2><p>主要错误为：执行 sudo npm install npm -g 时报 fsevents warning，以及安装报错等，按如下步骤处理。</p><ul><li>替换源 npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> 。</li><li>替换源 npm config set registry <a href="http://registry.npmjs.org/">http://registry.npmjs.org</a> 。</li><li>替换源 npm config set registry <a href="http://registry.npmjs.eu/">http://registry.npmjs.eu</a> 。</li><li>在以上三个源多次替换下更新 npm（sudo npm i npm -g） 和 nodejs（npm install –g n）。</li><li>更新稳定版本的 nodejs（n stable，不用 n latest）。</li><li>更新完需要 source ~/.profile。</li><li>如果以上操作后再无 warning，说明 MacOS 下配置成功 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，<a href="https://github.com/google/web-starter-kit/issues/796">参考链接</a> 。</li><li>但是走完以上流程，依旧报 warning，server 无法 run，说明 fsevents 确实在 Windows/Ubuntu 上出现了问题 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f637.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。此时，放弃这个尽管详细但依旧无法走通的配置方案 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。</li></ul><hr><h2 id="5、doccano-安装参考三"><a href="#5、doccano-安装参考三" class="headerlink" title="5、doccano 安装参考三"></a>5、doccano 安装参考三</h2><p>返回 doccano 官方 Github，按 pip installation 所提供步骤重新开始。</p><ul><li>pip3 install doccano（我的配置环境中用 pip 安装后面会报错），我在 root 下安装（sudo su -）成功。</li><li>doccano 命令打开本地 server，参数如图 3 所示，默认 username/password 为 admin/password。</li><li>登陆后如图 4 所示，如果默认 Firefox 无法 start annotation，安装 Chrome 打开即可。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210416191659333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ppbW9zYW5ndGlhbg==,size_16,color_FFFFFF,t_70#pic_center" alt="图 3. doccano 命令参数"><br><img src="https://img-blog.csdnimg.cn/20210416191817282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ppbW9zYW5ndGlhbg==,size_16,color_FFFFFF,t_70#pic_center" alt="图 4. doccano 登陆界面"></p><h2 id="6、doccano-安装参考四"><a href="#6、doccano-安装参考四" class="headerlink" title="6、doccano 安装参考四"></a>6、doccano 安装参考四</h2><p>Windows 7 安装过程同上，区别在于 Ubuntu 本地登陆为 <a href="http://0.0.0.0:8000/">http://0.0.0.0:8000/</a> ，Windows 本地登录为 <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> 。</p><ul><li>其中遇到一个 json 相关的问题“SQLite does not support JSONFields”，可参考 <a href="https://blog.csdn.net/melovemingming/article/details/108162811">解决方案</a> 和 <a href="https://www.sqlite.org/download.html">SQLite 下载链接</a> 。</li></ul><hr><h2 id="7、doccano-安装参考五"><a href="#7、doccano-安装参考五" class="headerlink" title="7、doccano 安装参考五"></a>7、doccano 安装参考五</h2><p>doccano 使用教程可参考官方文档 <a href="https://github.com/doccano/doccano">doccano-Github</a> 以及作者团队的 <a href="https://zhuanlan.zhihu.com/p/48320901">知乎介绍</a> 等。</p><p><img src="https://img-blog.csdnimg.cn/20210416192410334.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【机器学习一】</title>
      <link href="2021/04/11/20210411-ji-qi-xue-xi-yi/"/>
      <url>2021/04/11/20210411-ji-qi-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-集成学习相关代码和博文整理-whale"><a href="#whale-集成学习相关代码和博文整理-whale" class="headerlink" title=":whale: 集成学习相关代码和博文整理 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 集成学习相关代码和博文整理 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、Tree-boost-GitHub"><a href="#1、Tree-boost-GitHub" class="headerlink" title="1、Tree + boost GitHub"></a>1、Tree + boost GitHub</h2><p><a href="https://github.com/frank0532/decisiontree-randomforest-adaboost-GBDT-xgboost-lightGBM-catBoost">Github 链接参考</a>。</p><h2 id="2、GBM（Gradient-Boosting-Machine）"><a href="#2、GBM（Gradient-Boosting-Machine）" class="headerlink" title="2、GBM（Gradient Boosting Machine）"></a>2、GBM（Gradient Boosting Machine）</h2><p><a href="https://github.com/frank0532/decisiontree-randomforest-adaboost-GBDT-xgboost-lightGBM-catBoost">GBM 理解</a>，该博客中的公式色系和注释非常便于辅助理解。</p><ul><li>三种损失函数，square loss，absolute loss，huber loss。</li><li>AdaBoost 采用 square loss，GBDT 采用后面两种损失函数之一。</li></ul><h2 id="3、Tree-系列一"><a href="#3、Tree-系列一" class="headerlink" title="3、Tree 系列一"></a>3、Tree 系列一</h2><p>主要介绍<a href="https://zhuanlan.zhihu.com/p/85731206">ID3、C4.5、CART</a>。</p><h2 id="4、Tree-系列二"><a href="#4、Tree-系列二" class="headerlink" title="4、Tree 系列二"></a>4、Tree 系列二</h2><p>主要介绍<a href="https://zhuanlan.zhihu.com/p/86263786">Random Forest、Adaboost、GBDT</a>。</p><ul><li>集成学习三大类，Bagging（RF），Boosting（GBDT） 和 Stacking。</li><li>偏差（Bias）描述的是预测值和真实值之差；方差（Variance）描述的是预测值作为随机变量的离散程度。如下图所示。<img src="https://img-blog.csdnimg.cn/20210411215845631.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ppbW9zYW5ndGlhbg==,size_16,color_FFFFFF,t_70#pic_center" alt="偏差与方差"></li></ul><h2 id="5、Tree-系列三"><a href="#5、Tree-系列三" class="headerlink" title="5、Tree 系列三"></a>5、Tree 系列三</h2><p>主要介绍<a href="https://zhuanlan.zhihu.com/p/87885678">XGBoost、LightGBM</a>。</p><ul><li>直方图算法可以显著降低内存消耗。</li></ul><h2 id="6、LightGBM-安装教程"><a href="#6、LightGBM-安装教程" class="headerlink" title="6、LightGBM 安装教程"></a>6、LightGBM 安装教程</h2><p>参考<a href="https://blog.csdn.net/weixin_38569817/article/details/78808535">LightGBM 教程</a>。</p><ul><li>辅助理解 LightGBM 中的直方图算法等。</li><li>安装命令，pip install lightgbm。</li></ul><p>参考<a href="https://blog.csdn.net/olizxq/article/details/89222908">LightGBM 调参</a>。</p><ul><li>sklearn 中 GBDT 和 LightGBM 的参数介绍。</li></ul><p><img src="https://img-blog.csdnimg.cn/2021041122081610.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【技术探索二】</title>
      <link href="2021/03/18/20210318-ji-zhu-tan-suo-er/"/>
      <url>2021/03/18/20210318-ji-zhu-tan-suo-er/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-hexo-matery-博客个性化设置-whale"><a href="#whale-hexo-matery-博客个性化设置-whale" class="headerlink" title=":whale: hexo + matery 博客个性化设置 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> hexo + matery 博客个性化设置 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、设置参考"><a href="#1、设置参考" class="headerlink" title="1、设置参考"></a>1、设置参考</h2><p>博客个性化设置<a href="https://blog.csdn.net/qq_41121080/article/details/105475237">简版参考</a>，以及<a href="https://yafine-blog.cn/posts/4ab2.html#toc-heading-79">完整版参考</a>。</p><ul><li>关注其中的代码高亮部分。</li><li>关注其中的emoji 表情支持部分，<a href="https://blog.csdn.net/Startapi/article/details/105779071">emoji 代码参考</a>，如 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>☁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2601.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>、<span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f340.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>、<span class="github-emoji" style="display:inline;vertical-align:middle"><span>💝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>等。</li><li>另外显示目录需要使用 “1.2.3.” 等，汉字 “一二三” 不会生成目录。</li></ul><h2 id="2、缩放插图"><a href="#2、缩放插图" class="headerlink" title="2、缩放插图"></a>2、缩放插图</h2><p><a href="https://www.jianshu.com/p/5c1805c6f0ff">缩小插入图片</a>时，提前在本地完成缩放最佳。</p><h2 id="3、markdown-语法"><a href="#3、markdown-语法" class="headerlink" title="3、markdown 语法"></a>3、markdown 语法</h2><p>可参考<a href="https://www.cnblogs.com/abc-x/p/13470575.html">markdown 的基本语法</a>及其<a href="https://www.runoob.com/markdown/md-tutorial.html">中文文档</a>，编辑器可以选择 notepad++ 或 CSDN 提供的在线 markdown 编辑器。</p><p><img src="https://img-blog.csdnimg.cn/20210318161003336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ppbW9zYW5ndGlhbg==,size_16,color_FFFFFF,t_70#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【技术探索一】</title>
      <link href="2021/03/17/20210317-ji-zhu-tan-suo-yi/"/>
      <url>2021/03/17/20210317-ji-zhu-tan-suo-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="whale-hexo-github-action-git-配置个人博客网站-whale"><a href="#whale-hexo-github-action-git-配置个人博客网站-whale" class="headerlink" title=":whale: hexo + github action + git 配置个人博客网站 :whale:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> hexo + github action + git 配置个人博客网站 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><h2 id="1、Workflow"><a href="#1、Workflow" class="headerlink" title="1、Workflow"></a>1、Workflow</h2><p><a href="https://www.bilibili.com/video/BV1dt4y1Q7UE?from=search&amp;seid=14792497382015603750">完整配置参考视频</a>，以及该<a href="https://www.jianshu.com/p/97dfbc8e79db">视频对应的笔记</a>。</p><h2 id="2、Hexo-主题设置"><a href="#2、Hexo-主题设置" class="headerlink" title="2、Hexo 主题设置"></a>2、Hexo 主题设置</h2><p><a href="https://hexo.io/themes/">Hexo 全部主题</a>，<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">up 使用的 matery 主题中文文档</a>。如下图所示。</p><p><img src="https://img-blog.csdnimg.cn/20210318002055207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ppbW9zYW5ndGlhbg==,size_16,color_FFFFFF,t_70#pic_center" alt="matery 主题"></p><h2 id="3、本地测试"><a href="#3、本地测试" class="headerlink" title="3、本地测试"></a>3、本地测试</h2><p>打开 git bash 命令行界面操作，相关代码如下。</p><pre><code>npm install hexo-cli -ghexo init blogcd blognpm installhexo server</code></pre><h2 id="4、远端部署"><a href="#4、远端部署" class="headerlink" title="4、远端部署"></a>4、远端部署</h2><h3 id="4-1-根目录-“-config-yml”-文件配置"><a href="#4-1-根目录-“-config-yml”-文件配置" class="headerlink" title="4.1 根目录 “_config.yml” 文件配置"></a>4.1 根目录 “_config.yml” 文件配置</h3><pre><code>deploy:    type: git    repo: https://github.com/daojuhecheng/daojuhecheng.github.io    # repo: git@github.com:daojuhecheng/daojuhecheng.github.io.git    branch: master</code></pre><h3 id="4-2-可能出现的-error"><a href="#4-2-可能出现的-error" class="headerlink" title="4.2 可能出现的 error"></a>4.2 可能出现的 error</h3><ul><li>执行 “hexo d” 后，出现 “error deployer not found: github”。 <pre><code>npm install hexo-deployer-git --save# 安装 hexo 对于 git 的部署工具</code></pre></li><li>Git 报错： “OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443”。<pre><code>git config --global --add remote.origin.proxy ""</code></pre></li><li>继续报上一步的错，参考 <a href="https://segmentfault.com/a/1190000018624911?utm_source=tag-newest">443 error</a>，修改 “_config.yml” 中的 “repo” 行（https 改为 ssh）。</li></ul><h2 id="5、自定义模板相关"><a href="#5、自定义模板相关" class="headerlink" title="5、自定义模板相关"></a>5、自定义模板相关</h2><p><a href="https://www.cnblogs.com/cmt/p/14553189.html">看板设置</a>，需要修改 “_config.yml” 文件。</p><pre><code>npm install --save hexo-helper-live2d# 安装 live2d# 不同的看板人物需要额外的 install</code></pre><h2 id="6、Github-Actions"><a href="#6、Github-Actions" class="headerlink" title="6、Github Actions"></a>6、Github Actions</h2><p>Github Actions 可以实现自动化部署，即提交代码后自动发布。参考 <a href="https://www.jianshu.com/p/97dfbc8e79db">视频对应的笔记</a> 可以实现这一过程，即切换分支 “myblog” 后执行 “git add .”、”git commit -m ‘log’” 和 “git push origin myblog” 操作。</p><p>另外，需注意 Git 的一些相关操作如 <a href="https://www.cnblogs.com/aididiao/p/11882227.html">切换分支操作</a>、<a href="https://www.cnblogs.com/zph666/p/12692734.html">撤销 “commit” 和 “add”</a> 以及 “git pull” 同步远程与本地（merge）等。</p><p><img src="https://img-blog.csdnimg.cn/20210318140000509.png#pic_center"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hello World】</title>
      <link href="2021/03/03/hello-world/"/>
      <url>2021/03/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Hi, welcome to my web page!</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
